himport unittest
from unittest.mock import MagicMock, patch
from datetime import datetime, timedelta
from pyspark.sql import SparkSession, Row
from pyspark.sql import functions as F, types as T

# Assuming the functions are in a module named my_module
from my_module import check_file_processed, mark_file_as_processed, get_latest_file_info, check_for_new_files

class TestFileProcessing(unittest.TestCase):
    
    def setUp(self):
        self.spark = MagicMock(spec=SparkSession)
        self.schema = "test_schema"
        self.file_name = "72648_test.csv"
        self.schemafromyaml = "schema_from_yaml"
        self.location = "test_location"
        self.hdfs_path = "hdfs:///path/to/your/directory"
    
    @patch('my_module.write_to_hive')
    def test_check_file_processed(self, mock_write_to_hive):
        df = self.spark.sql.return_value
        df.filter.return_value.count.return_value = 0

        result = check_file_processed(self.spark, self.schema, self.file_name, self.location)
        
        self.assertFalse(result)
        df.filter.return_value.count.return_value = 1
        
        result = check_file_processed(self.spark, self.schema, self.file_name, self.location)
        
        self.assertTrue(result)
    
    @patch('my_module.write_to_hive')
    def test_mark_file_as_processed(self, mock_write_to_hive):
        mark_file_as_processed(self.spark, self.schema, self.file_name, self.schemafromyaml, self.location)
        mock_write_to_hive.assert_called_once()
    
    @patch('my_module.get_latest_file_info')
    @patch('my_module.check_file_processed')
    @patch('my_module.mark_file_as_processed')
    def test_check_for_new_files(self, mock_mark_file_as_processed, mock_check_file_processed, mock_get_latest_file_info):
        mock_get_latest_file_info.return_value = (self.file_name, datetime.now())
        mock_check_file_processed.return_value = False

        result = check_for_new_files(self.spark, self.schema, self.hdfs_path, self.schemafromyaml, self.location)
        
        self.assertTrue(result)
        mock_mark_file_as_processed.assert_called_once()

    @patch('my_module.get_latest_file_info')
    @patch('my_module.check_file_processed')
    def test_no_new_files(self, mock_check_file_processed, mock_get_latest_file_info):
        mock_get_latest_file_info.return_value = (None, None)

        result = check_for_new_files(self.spark, self.schema, self.hdfs_path, self.schemafromyaml, self.location)
        
        self.assertFalse(result)
        mock_check_file_processed.assert_not_called()
    
    @patch('my_module.get_latest_file_info')
    @patch('my_module.check_file_processed')
    def test_file_already_processed(self, mock_check_file_processed, mock_get_latest_file_info):
        mock_get_latest_file_info.return_value = (self.file_name, datetime.now())
        mock_check_file_processed.return_value = True

        result = check_for_new_files(self.spark, self.schema, self.hdfs_path, self.schemafromyaml, self.location)
        
        self.assertFalse(result)
        mock_check_file_processed.assert_called_once()

if __name__ == '__main__':
    unittest.main()
