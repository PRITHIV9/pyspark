import pytest

@pytest.fixture(scope="module")
def session():
    session = get_snowpark_session()
    yield session
    session.close()

def test_create_table(session):
    # Create the table
    create_table(session)
    
    # Check if the table exists
    result = session.sql("SHOW TABLES LIKE 'test_table'").collect()
    assert len(result) == 1, "Table 'test_table' was not created."
    
    # Verify the schema of the table
    table_info = session.sql("DESCRIBE TABLE test_table").collect()
    expected_schema = [
        ("ID", "NUMBER", "NULLABLE"),
        ("NAME", "TEXT", "NULLABLE"),
        ("CREATED_AT", "TIMESTAMP_NTZ", "NULLABLE")
    ]
    
    for idx, column in enumerate(expected_schema):
        assert table_info[idx].name == column[0], f"Column {idx + 1} name mismatch."
        assert table_info[idx].type == column[1], f"Column {idx + 1} type mismatch."
        assert table_info[idx].null == column[2], f"Column {idx + 1} nullability mismatch."


# create_table.py

def create_table(session):
    session.sql("""
        CREATE OR REPLACE TABLE test_table (
            id INTEGER,
            name STRING,
            created_at TIMESTAMP
        )
    """).collect()

# test_create_table.py

import unittest
from snowflake.snowpark import Session
from snowpark_session import get_snowpark_session
from create_table import create_table

class TestCreateTable(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.session = get_snowpark_session()

    @classmethod
    def tearDownClass(cls):
        cls.session.close()

    def test_create_table(self):
        # Create the table
        create_table(self.session)
        
        # Check if the table exists
        result = self.session.sql("SHOW TABLES LIKE 'test_table'").collect()
        self.assertEqual(len(result), 1, "Table 'test_table' was not created.")
        
        # Verify the schema of the table
        table_info = self.session.sql("DESCRIBE TABLE test_table").collect()
        expected_schema = [
            ("ID", "NUMBER", "NULLABLE"),
            ("NAME", "TEXT", "NULLABLE"),
            ("CREATED_AT", "TIMESTAMP_NTZ", "NULLABLE")
        ]
        
        for idx, column in enumerate(expected_schema):
            self.assertEqual(table_info[idx].name, column[0], f"Column {idx + 1} name mismatch.")
            self.assertEqual(table_info[idx].type, column[1], f"Column {idx + 1} type mismatch.")
            self.assertEqual(table_info[idx].null, column[2], f"Column {idx + 1} nullability mismatch.")

if __name__ == '__main__':
    unittest.main()
